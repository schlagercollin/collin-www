<html>
    <head>
        <title>My first three.js app</title>
        <style>
            body { margin: 0; }
            canvas { width: 100%; height: 100% }
        </style>
    </head>
    <body>
        <script src="js/three.js"></script>
        <script src="js/TrackballControls.js"></script>
        <script src="js/OrbitControls.js"></script>
        <script>
            var scene = new THREE.Scene();

            var renderer = new THREE.WebGLRenderer();
            renderer.setSize( window.innerWidth, window.innerHeight);
            document.body.appendChild( renderer.domElement );

            var camera = new THREE.PerspectiveCamera( 45, window.innerWidth /
                 window.innerHeight, 0.1, 1000 );

            camera.position.set( 0, 0, 100 );

            var controls = new THREE.OrbitControls( camera, renderer.domElement );
            controls.target.set( 0, 0, 25 );
            controls.autoRotate = true;

            var MAX_POINTS = 10000;

            class LorenzAttractor {
                constructor(rho, sigma, beta) {
                    this.rho = rho;
                    this.sigma = sigma;
                    this.beta = beta; 

                    this.material = new THREE.LineBasicMaterial( { color: 0xff0000 } );
                    this.geometry = new THREE.BufferGeometry();


                }

                compile(){
                    this.positions = new Float32Array( MAX_POINTS * 3);
                    this.geometry.addAttribute( 'position',
                        new THREE.BufferAttribute( this.positions, 3 ) );

                    this.geometry.setDrawRange( 0, 2);

                    this.line = new THREE.Line( this.geometry, this.material );
                    
                    this.update();
                }

                setStart( x, y, z ) {
                    this.init_x = x;
                    this.init_y = y;
                    this.init_z = z; 
                }

                setColor( color ){
                    this.material = new THREE.LineBasicMaterial( { color: color } );
                } 

                update() {
                    var positions = this.line.geometry.attributes.position.array;
                    var index = 0;                

                    var [x, y, z] = [ this.init_x, this.init_y, this.init_z ];
                    var [dx, dy, dz] = [ 0, 0, 0 ];
                    var dt = 0.01;

                    for ( var i = 0, l = MAX_POINTS; i < l; i ++ ){

                        positions[ index ++ ] = x;
                        positions[ index ++ ] = y;
                        positions[ index ++ ] = z;

                        x += (this.sigma * (y - x))*dt;
                        y += (x * (this.rho - z) - y)*dt;
                        z += (x * y - this.beta * z)*dt;
                    }
                }
            }

            var obj_1 = new LorenzAttractor(28, 10, 8/3);
            var obj_2 = new LorenzAttractor(28, 10, 8/3);
            var obj_3 = new LorenzAttractor(28, 10, 8/3);
            var obj_4 = new LorenzAttractor(28, 10, 8/3);


            scene.add( obj_1.line );
            scene.add( obj_2.line );
            scene.add( obj_3.line );
            scene.add( obj.4.line )
 
            var drawCount = 2;
            var animate = function() {

                setTimeout( function() {
                    requestAnimationFrame( animate );
                }, 1000 / 100 );

                drawCount = ( drawCount + 5 ) % MAX_POINTS;

                obj_1.line.geometry.setDrawRange( 0, drawCount );
                obj_2.line.geometry.setDrawRange( 0, drawCount );

                controls.update();
                renderer.render( scene, camera );
            }

            animate();

        </script>
    </body>
</html>
